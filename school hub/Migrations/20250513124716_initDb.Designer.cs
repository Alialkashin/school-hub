// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using school_hub.Data;

#nullable disable

namespace school_hub.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250513124716_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("school_hub.Models.Book", b =>
                {
                    b.Property<short>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("BookId"));

                    b.Property<string>("BookPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("LibrarySectionId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("LibrarySectionId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Exam", b =>
                {
                    b.Property<short>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ExamId"));

                    b.Property<byte>("ExamTime")
                        .HasColumnType("tinyint");

                    b.Property<short>("LessonId")
                        .HasColumnType("smallint");

                    b.Property<byte>("PassingScore")
                        .HasColumnType("tinyint");

                    b.HasKey("ExamId");

                    b.HasIndex("LessonId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<short>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("school_hub.Models.Exam.StudentAnswer", b =>
                {
                    b.Property<int>("StudentExamId")
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.HasKey("StudentExamId", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("school_hub.Models.Exam.StudentExam", b =>
                {
                    b.Property<int>("StudentExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentExamId"));

                    b.Property<DateOnly>("ExamDate")
                        .HasColumnType("date");

                    b.Property<short>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<byte>("TimeToComlete")
                        .HasColumnType("tinyint");

                    b.HasKey("StudentExamId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExams");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateOnly>("CommentDate")
                        .HasColumnType("date");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Lesson", b =>
                {
                    b.Property<short>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LessonId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ExamId")
                        .HasColumnType("smallint");

                    b.Property<byte>("LessonNo")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PreviousLesson")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("UnitId")
                        .HasColumnType("smallint");

                    b.HasKey("LessonId");

                    b.HasIndex("UnitId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReplyDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ReplyId");

                    b.HasIndex("CommentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Replys");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<short>("Duration")
                        .HasColumnType("smallint");

                    b.Property<short>("LessonId")
                        .HasColumnType("smallint");

                    b.Property<int?>("PreviousVideo")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId");

                    b.HasIndex("LessonId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("school_hub.Models.Sections.Section", b =>
                {
                    b.Property<short>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("SectionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionType")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");

                    b.HasDiscriminator<int>("SectionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("school_hub.Models.StudentRating", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<short>("LessonId")
                        .HasColumnType("smallint");

                    b.Property<byte>("RatingValue")
                        .HasColumnType("tinyint");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("StudentRatings");
                });

            modelBuilder.Entity("school_hub.Models.StudentStudyPlan", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<short>("PlanId")
                        .HasColumnType("smallint");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "PlanId");

                    b.HasIndex("PlanId");

                    b.ToTable("StudentSubscriptions");
                });

            modelBuilder.Entity("school_hub.Models.StudentView", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "VideoId");

                    b.HasIndex("VideoId");

                    b.ToTable("StudentViews");
                });

            modelBuilder.Entity("school_hub.Models.StudyPlan", b =>
                {
                    b.Property<short>("StudyPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("StudyPlanId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("StudySectionId")
                        .HasColumnType("smallint");

                    b.HasKey("StudyPlanId");

                    b.HasIndex("StudySectionId");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("school_hub.Models.Subject", b =>
                {
                    b.Property<short>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("SubjectId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("StudyPlanId")
                        .HasColumnType("smallint");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDuration")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.HasIndex("StudyPlanId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("school_hub.Models.Unit", b =>
                {
                    b.Property<short>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("UnitId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("SubjectId")
                        .HasColumnType("smallint");

                    b.HasKey("UnitId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("school_hub.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("school_hub.Models.Sections.LibrarySection", b =>
                {
                    b.HasBaseType("school_hub.Models.Sections.Section");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("school_hub.Models.Sections.StudySection", b =>
                {
                    b.HasBaseType("school_hub.Models.Sections.Section");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("school_hub.Models.Users.Admin", b =>
                {
                    b.HasBaseType("school_hub.Models.Users.User");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("school_hub.Models.Users.Student", b =>
                {
                    b.HasBaseType("school_hub.Models.Users.User");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("school_hub.Models.Users.Teacher", b =>
                {
                    b.HasBaseType("school_hub.Models.Users.User");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("school_hub.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("school_hub.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("school_hub.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("school_hub.Models.Book", b =>
                {
                    b.HasOne("school_hub.Models.Sections.LibrarySection", "LibrarySection")
                        .WithMany("Books")
                        .HasForeignKey("LibrarySectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LibrarySection");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Answer", b =>
                {
                    b.HasOne("school_hub.Models.Exam.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Exam", b =>
                {
                    b.HasOne("school_hub.Models.Lesson.Lesson", "Lesson")
                        .WithOne("Exam")
                        .HasForeignKey("school_hub.Models.Exam.Exam", "LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Question", b =>
                {
                    b.HasOne("school_hub.Models.Exam.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("school_hub.Models.Exam.StudentAnswer", b =>
                {
                    b.HasOne("school_hub.Models.Exam.Answer", "Answer")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Exam.StudentExam", "StudentExam")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("StudentExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("StudentExam");
                });

            modelBuilder.Entity("school_hub.Models.Exam.StudentExam", b =>
                {
                    b.HasOne("school_hub.Models.Exam.Exam", "Exam")
                        .WithMany("StudentExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.Student", "Student")
                        .WithMany("StudentExams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Comment", b =>
                {
                    b.HasOne("school_hub.Models.Users.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.Teacher", "Teacher")
                        .WithMany("Comments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Lesson.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Lesson", b =>
                {
                    b.HasOne("school_hub.Models.Unit", "Unit")
                        .WithMany("Lessons")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Reply", b =>
                {
                    b.HasOne("school_hub.Models.Lesson.Comment", "Comment")
                        .WithMany("Replys")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.Student", "Student")
                        .WithMany("Replies")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("school_hub.Models.Users.Teacher", "Teacher")
                        .WithMany("Replies")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Video", b =>
                {
                    b.HasOne("school_hub.Models.Lesson.Lesson", "Lesson")
                        .WithMany("Videos")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("school_hub.Models.StudentRating", b =>
                {
                    b.HasOne("school_hub.Models.Lesson.Lesson", "Lesson")
                        .WithMany("Ratings")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.Student", "Student")
                        .WithMany("StudentRatings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("school_hub.Models.StudentStudyPlan", b =>
                {
                    b.HasOne("school_hub.Models.StudyPlan", "StudyPlan")
                        .WithMany("StudyPlanStudents")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.Student", "Student")
                        .WithMany("StudentStudyPlans")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("school_hub.Models.StudentView", b =>
                {
                    b.HasOne("school_hub.Models.Users.Student", "Student")
                        .WithMany("StudentViews")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Lesson.Video", "Video")
                        .WithMany("Views")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("school_hub.Models.StudyPlan", b =>
                {
                    b.HasOne("school_hub.Models.Sections.StudySection", "StudySection")
                        .WithMany("StudyPlans")
                        .HasForeignKey("StudySectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudySection");
                });

            modelBuilder.Entity("school_hub.Models.Subject", b =>
                {
                    b.HasOne("school_hub.Models.StudyPlan", "StudyPlan")
                        .WithMany("Subjects")
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("school_hub.Models.Users.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudyPlan");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("school_hub.Models.Unit", b =>
                {
                    b.HasOne("school_hub.Models.Subject", "Subject")
                        .WithMany("Units")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Answer", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentExams");
                });

            modelBuilder.Entity("school_hub.Models.Exam.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("school_hub.Models.Exam.StudentExam", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Comment", b =>
                {
                    b.Navigation("Replys");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Lesson", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();

                    b.Navigation("Ratings");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("school_hub.Models.Lesson.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("school_hub.Models.StudyPlan", b =>
                {
                    b.Navigation("StudyPlanStudents");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("school_hub.Models.Subject", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("school_hub.Models.Unit", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("school_hub.Models.Sections.LibrarySection", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("school_hub.Models.Sections.StudySection", b =>
                {
                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("school_hub.Models.Users.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Replies");

                    b.Navigation("StudentExams");

                    b.Navigation("StudentRatings");

                    b.Navigation("StudentStudyPlans");

                    b.Navigation("StudentViews");
                });

            modelBuilder.Entity("school_hub.Models.Users.Teacher", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Replies");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
